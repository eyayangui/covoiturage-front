/* Backend (Spring Boot)
Create a Spring Boot Project:

You can use Spring Initializr to generate a Spring Boot project with dependencies for Spring Web and Spring Boot DevTools.
Configure File Storage Properties:

Define properties in application.properties to specify the file storage location.
properties
Copier le code
file.upload-dir=uploads
Create a File Storage Service:

Implement a service to handle file storage operations.
java
Copier le code
package com.example.upload.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

@Service
public class FileStorageService {

    private final Path fileStorageLocation;

    public FileStorageService(@Value("${file.upload-dir}") String uploadDir) {
        this.fileStorageLocation = Paths.get(uploadDir).toAbsolutePath().normalize();
        try {
            Files.createDirectories(this.fileStorageLocation);
        } catch (Exception ex) {
            throw new RuntimeException("Could not create the directory where the uploaded files will be stored.", ex);
        }
    }

    public String storeFile(MultipartFile file) {
        String fileName = file.getOriginalFilename();
        try {
            if (fileName.contains("..")) {
                throw new RuntimeException("Sorry! Filename contains invalid path sequence " + fileName);
            }
            Path targetLocation = this.fileStorageLocation.resolve(fileName);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);
            return fileName;
        } catch (IOException ex) {
            throw new RuntimeException("Could not store file " + fileName + ". Please try again!", ex);
        }
    }
}
Create a Controller:

Implement a controller to handle file upload requests.
java
Copier le code
package com.example.upload.controller;

import com.example.upload.service.FileStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/upload")
public class FileUploadController {

    @Autowired
    private FileStorageService fileStorageService;

    @PostMapping
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
        String fileName = fileStorageService.storeFile(file);
        return ResponseEntity.ok("File uploaded successfully: " + fileName);
    }
}
Frontend (Angular)
Create an Angular Project:

Use Angular CLI to generate a new Angular project.
sh
Copier le code
ng new file-upload-app
cd file-upload-app
Install Angular File Upload Package:

Install the package to handle file uploads.
sh
Copier le code
npm install ngx-file-upload --save
Create a File Upload Component:

Generate a component for file upload.
sh
Copier le code
ng generate component file-upload
Implement the File Upload Component:

Add HTML template for file upload.
html
Copier le code
<!-- src/app/file-upload/file-upload.component.html -->
<div class="file-upload">
  <h2>Upload File</h2>
  <input type="file" (change)="onFileSelected($event)" />
  <button (click)="onUpload()">Upload</button>
</div>
Add TypeScript logic for file upload.
typescript
Copier le code
// src/app/file-upload/file-upload.component.ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.css']
})
export class FileUploadComponent {
  selectedFile: File;

  constructor(private http: HttpClient) {}

  onFileSelected(event) {
    this.selectedFile = event.target.files[0];
  }

  onUpload() {
    const uploadData = new FormData();
    uploadData.append('file', this.selectedFile, this.selectedFile.name);

    this.http.post('http://localhost:8080/api/upload', uploadData)
      .subscribe(response => {
        console.log('Upload success:', response);
      }, error => {
        console.error('Upload error:', error);
      });
  }
} */